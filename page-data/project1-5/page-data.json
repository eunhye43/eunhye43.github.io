{"componentChunkName":"component---src-templates-blog-template-js","path":"/project1-5/","result":{"data":{"cur":{"id":"039142dd-cf06-5afa-be08-75e1748c8a31","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</p>\n<h3 id=\"-초안과-최종본-사이에서-내가-배운-것-\" style=\"position:relative;\"><a href=\"#-%EC%B4%88%EC%95%88%EA%B3%BC-%EC%B5%9C%EC%A2%85%EB%B3%B8-%EC%82%AC%EC%9D%B4%EC%97%90%EC%84%9C-%EB%82%B4%EA%B0%80-%EB%B0%B0%EC%9A%B4-%EA%B2%83-\" aria-label=\" 초안과 최종본 사이에서 내가 배운 것  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 초안과 최종본 사이에서 내가 배운 것! 🐳</h3>\n<p>-> 내가 구현한 건 ProductDetailView만!</p>\n<ol>\n<li>처음에는 for 문을 돌려야하는 키값들을 3가지로 나눠서 각각 리스트에 어펜드 해주는 식으로 코드를 짰다. 그래서 맨마지막 result에 그 list값을 넣어주는 방법으로 리턴을 해줬다. 최종본에는 리스트 컴프렌션을 써서 for문을 한줄로 만들어주고 result안에 값을 다 넣어주니 코드 효율성이 올라갔고 가독성도 좋아졌다.</li>\n<li>초안에서 filter를 주고 해당 product를 찾는 방법으로 코드를 짰었는데 최종본에서는 모두 set을 써서 _set.all()로 좀더 심플하게 코드를 정리했다.</li>\n<li>\n<p>product option값들도 한개가 아니라 여러가지 값이기 때문에 for문을 돌려주어야하고, product에서 productoption의 price, quantity, weight값 한개씩만 set을 통해 가져오고 싶었는데 set을 쓰려면 값을 특정해주어야만 가능하다고 하셨다.</p>\n<h3 id=\"-제품-상세페이지-viewpy-초안-\" style=\"position:relative;\"><a href=\"#-%EC%A0%9C%ED%92%88-%EC%83%81%EC%84%B8%ED%8E%98%EC%9D%B4%EC%A7%80-viewpy-%EC%B4%88%EC%95%88-\" aria-label=\" 제품 상세페이지 viewpy 초안  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐼 제품 상세페이지 view.py 초안 🐼</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nfrom django.http import JsonResponse\nfrom django.views import View</code></pre></div>\n</li>\n</ol>\n<p>from products.models import Product, ProductImage, ProductOption, ProductDescription, Ingredient</p>\n<p>class ProductDetailView(View):\ndef get(self, request, product<em>id):\nproduct = Product.objects.get(id=product</em>id)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    product_images = []\n    productimages = ProductImage.objects.filter(product=product)\n    for productimage in productimages:\n        product_images.append(productimage.image_url)\n\n    product_descriptions = []\n    productdescriptions = product.productdescription_set.all()\n    for productdescription in productdescriptions:\n        product_descriptions.append({\n             'description1' : productdescription.description,\n             'image_url1' : productdescription.image_url\n             })\n\n    ingredient_detail = []\n    ingredients = product.ingredient_set.all()\n    for ingredient in ingredients:\n        ingredient_detail.append({\n                    'description2' : ingredient.description,\n                    'image_url2' : ingredient.image_url,\n                    'name2' : ingredient.name\n                 })\n\n    result = {\n        'id'        : product.id,\n        'name'      : product.name,\n        'hashtag'   : product.hashtag,\n        'hit'       : product.hit,\n        'video_url' : product.video_url,\n        'price'     : product.productoption_set.first().price,\n        'weight'    : product.productoption_set.first().weight,\n        'quantity'  : product.productoption_set.first().quantity,\n        'product_images' : product_images,\n        'product_descriptions' : product_descriptions,\n        'ingredient_detail' : ingredient_detail\n    }\n    \n    \n    return JsonResponse({'result' : result}, status=200)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 🐼 제품 상세페이지 view.py 최종 🐼 </code></pre></div>\n<p>import json</p>\n<p>from django.http     import JsonResponse\nfrom django.views    import View\nfrom django.db.models       import Q</p>\n<p>from products.models import Category, Product, ProductImage, ProductOption, ProductDescription, Ingredient, Tag, SubCategory, ProductTag</p>\n<p>class ProductListView(View):\ndef get(self, request):\ncategory<em>id       = request.GET.get(‘category</em>id’)\nsub<em>category</em>id   = request.GET.get(‘sub<em>category</em>id’)\nkeyword           = request.GET.get(‘keyword’)\npagination        = int(request.GET.get(‘pagination’, 0))\nlimit             = int(request.GET.get(‘limit’, 4))\noffset            = pagination * 4</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    if category_id or sub_category_id:\n        products = Product.objects.filter(\n            Q(category_id = category_id) |\n            Q(sub_category_id = sub_category_id))[offset:offset+limit]\n\n    elif keyword:\n        products= Product.objects.filter(name__contains = keyword)\n        \n    else:\n        products = Product.objects.all()[offset:offset+limit]\n\n    product_list = [{\n        'id'            : product.id,\n        'name'          : product.name,\n        'hashtag'       : product.hashtag,\n        'option' : [{ \n            'option_id'     : option.id,\n            'price'         : option.price,\n            'quantity'      : option.quantity,\n            'weight'        : option.weight,\n            } for option in product.productoption_set.all()],\n        'image_url'     : product.productimage_set.first().image_url,\n        'tag'    : [{'id' : tag.id, 'tag': tag.name} for tag in product.tag_set.all()]\n        } for product in products]\n    \n    return JsonResponse({'product_info' : product_list}, status = 200)</code></pre></div>\n<p>class ProductDetailView(View):\ndef get(self, request, product<em>id):\nproduct = Product.objects.get(id=product</em>id)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    result = {\n        'product_id'           : product.id,\n        'name'                 : product.name,\n        'hashtag'              : product.hashtag,\n        'hit'                  : product.hit,\n        'video_url'            : product.video_url,\n        'product_options'      : [{ \n            'price'         : productoption.price,\n            'quantity'      : productoption.quantity,\n            'weight'        : productoption.weight\n            } for productoption in product.productoption_set.all()],\n        'product_images'       : [productimage.image_url\n              for productimage in product.productimage_set.all()],\n        'product_descriptions' : [{\n                'description1' : productdescription.description,\n                'image_url1'   : productdescription.image_url\n            } for productdescription in product.productdescription_set.all()],\n        'ingredient_detail'    : [{\n                'description2' : ingredient.description,\n                'image_url2'   : ingredient.image_url,\n                'name2'        : ingredient.name\n            } for ingredient in product.ingredient_set.all()],\n        'tag'                  : [tag.name for tag in product.tag_set.all()]\n            }\n    return JsonResponse({'result' : result}, status=200)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 🐳 오늘 새롭게 배운 것! 🐳 \npush한 커밋 삭제(가장 최근 commit을 삭제)\n>git reset HEAD^\n\n깃 커밋메시지 수정\n>git commit –amend\n\n강제 push \n>git push origin master(또는 브랜치이름) -f\n\n브렌치 삭제\n>git branch -d (브랜치명)\n\n* 깃메인에서는 작업하지 않기(메인에서 작업하다가 브랜치파서 넘어가면 add, commit해줘야하니까...) => 메인에서 브랜치 만들고 거기서 작업!\n* push 받기 전에는 pull 먼저 다 받아주기!</code></pre></div>","excerpt":"🦖 1차 프로젝트 <HOXY LUSH?> 🦖 🐳 초안과 최종본 사이에서 내가 배운 것! 🐳 -> 내가 구현한 건 ProductDetailView만! 처음에는 for 문을 돌려야하는 키값들을 3가지로 나눠서 각각 리스트에 어펜드 해주는 식으로 코드를 짰다. 그래서 맨마지막 result에 그 list값을 넣어주는 방법으로 리턴을 해줬다. 최종본에는 리스트 컴프렌션을 써서 for문을 한줄로 만들어주고 result안에 값을 다 넣어주니 코드 효율성이 올라갔고 가독성도 좋아졌다. 초안에서 filter를 주고 해당 product를 찾는 방법으로 코드를 짰었는데 최종본에서는 모두 set을 써서 _set.all()로 좀더 심플하게 코드를 정리했다. product option값들도 한개가 아니라 여러가지 값이기 때문에 for문을 돌려주어야하고, product에서 productoption의 price, quantity, weight값 한개씩만 set을 통해 가져오고 싶었는데 set을 쓰려면 값을 특…","frontmatter":{"date":"May 19, 2021","title":"HoxyLush(5)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-5/"}},"next":{"id":"81623312-5c25-5fc6-9d50-4ac4e9151647","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</p>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것1-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%831-\" aria-label=\" 오늘 프로젝트 하면서 배운 것1  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(1) 🐳</h3>\n<p>-> 회원가입&#x26;로그인 코드: 내가 구현한 건 SignUpVieww만!</p>\n<ol>\n<li>회원가입과 로그인은 사용자가 요청을 보내는 st 이기 때문에 post 메쏘드를 쓴다! 제이슨을 통해 바디에 데이터를 담아 받고 보낸다.</li>\n<li>따로 유효성 검사를 validator.py를 만들어서 import해주려고 했는데 그냥 회원가입안에 유효성 검사를 넣어주었다. 프론트랑 유효성검사 코드 확인은 필수! <strong>어떤 조건을 걸어주었는지 프론트에 먼저 얘기해주기!</strong></li>\n<li>bcrypt를 활용해서 비밀번호를 해쉬화해주었다. encode 시키고, 다시 decode까지! 이 코드는 외워버렸는데 아주 뿌듯스 👌🏽</li>\n<li>마지막으로, 초안을 작성할 때는 create안에 값을 다 따로 써주었었는데, 최종본에서 한번에 괄호로 열어서 다 넣어주니 훨씬 가독성이 올라간다.</li>\n</ol>\n<h3 id=\"-회원가입--로그인-\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85--%EB%A1%9C%EA%B7%B8%EC%9D%B8-\" aria-label=\" 회원가입  로그인  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐼 회원가입 &#x26; 로그인 🐼</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nimport bcrypt\nimport jwt\nimport re\n\nfrom django.views         import View\nfrom django.http          import JsonResponse\nfrom json.decoder         import JSONDecodeError\n\nfrom users.models import User\nfrom my_settings  import SECRET_KEY, ALGORITHM\n\nclass SignUpView(View):\n    def post(self, request):\n        try:\n            data         = json.loads(request.body)\n            account      = data[\"account\"]\n            password     = data[\"password\"]\n            email        = data[\"email\"]\n            phone_number = data[\"phone_number\"]\n            nickname     = data.get(\"nickname\")\n            address      = data.get(\"address\")\n\n            email_validation    = re.compile('^[a-z0-9]+@[a-z0-9]+\\.[a-z0-9.]+$', re.I)\n            password_validation = re.compile('^(?=.*[a-z])(?=.*[0-9]).{8,}', re.I)\n\n            if not email_validation.match(email):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_EMAIL\"}, status=400)\n\n            if not password_validation.match(password):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_PASSWORD\"}, status=400)\n           \n            if User.objects.filter(phone_number=data.get('phone_number')).exists() and data.get('phone_number') != None:\n                return JsonResponse({'MESSAGE': 'ALREADY_EXISTS'}, status = 400)\n\n            if User.objects.filter(nickname=data.get('nickname')).exists()\\\n                and data.get('nickname') != None:\n                return JsonResponse({'MESSAGE' : 'ALREADY_EXISTS'}, status = 400)\n\n            hashed_password= bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt()).decode(\"utf-8\")\n\n            User.objects.create(\n                account      = account,\n                password     = hashed_password,\n                email        = email,\n                phone_number = phone_number,\n                nickname     = nickname,\n                address      = address\n                )\n            return JsonResponse({\"MESSAGE\" : \"SUCCESS\"}, status = 201)\n\n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status = 400)\n\nclass LogInView(View):\n    def post(self, request):\n        try:\n            data = json.loads(request.body)\n            user = User.objects.get(account=data[\"account\"])\n            hashed_password = user.password.encode(\"utf-8\")\n\n            if not bcrypt.checkpw(data[\"password\"].encode(\"utf-8\"), hashed_password):\n                return JsonResponse({\"MESSAGE\":\"INVALID_USER\"}, status=401)\n\n            access_token = jwt.encode({\"account\" : user.id}, SECRET_KEY, algorithm = ALGORITHM)\n\n            return JsonResponse({\"MESSAGE\":\"SUCCESS\", \"ACCESS_TOKEN\": access_token}, status=200)\n        \n        except json.JSONDecodeError:\n            return JsonResponse({\"MESSAGE\": \"KEY_ERROR\"}, status=404) \n        \n        except User.DoesNotExist:\n            return JsonResponse({\"MESSAGE\": \"INVALID_USER\"}, status=404)\n        \n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status=400)</code></pre></div>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것2-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%832-\" aria-label=\" 오늘 프로젝트 하면서 배운 것2  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(2) 🐳</h3>\n<ol>\n<li>git commit 메시지\ngit commit (TEMPLATE에 맞춰서!)</li>\n<li><strong>Add</strong> - 레이아웃 / 기능 추가</li>\n<li><strong>Remove</strong> - 내용 삭제 (폴더 / 파일 삭제)</li>\n<li><strong>Modify</strong> - 수정 (JSON 데이터 포맷 변경 / 버튼 색깔 변경 / 폰트 변경)</li>\n<li><strong>Fix</strong> - 버그/오류 해결</li>\n<li>\n<p><strong>Refactor</strong> - 코드 리팩토링 (멘토 리뷰 반영 / 스스로 리팩토링 / 중복 코드 제거 / 불필요 코드 제거 / 성능 개선</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🥲 예시 \n🥲 분류: 한줄 제목\n- 구현내용 detail\n- 구현내용 detail\n🥲 Add: User app 생성 및 회원가입 엔드포인트 추가</code></pre></div>\n</li>\n<li>유저 앱을 만들고, 유저 모델 클래스 생성</li>\n<li>\n<p>회원가입 엔드포인트 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>git hub!</li>\n</ol>\n<p>😇 깃헙 익숙하게하기,\ngit add .\ngit commit (여기서 커밋메시지 들어가서 써주고 :wq!)\ngit log\ngit status\ngit push origin feature/signup-login\n(요기서 signup-login은 미리 만들어둔 브랜치 제목)\n(git push할때는 manage.py있는 곳에서 commit+push)\n<strong>(push하기전에는 pull 모두 다 받기)</strong></p>\n<p>😇 멘토님 ok merge나면,\ngit checkout main (메인으로 먼저가서!)\ngit pull origin main (메인으로 풀받아오기!)\ngit branch (name) 새로운 브랜치 하나 파서 시작하기! (브렌치는 메인에 만들자)</p>\n<p>😇 pull은 github 메인과 내 local메인사이에서 가능\npull받은 내 local메인의 업데이트 내용을 내 branch에서도 적용해주기 위해서 merge를 시켜주면 됨(in 브렌치, git merge main)</p>\n<p>😇 pull받아오면, </p>\n<ul>\n<li>makemigration, migrate, runserver까지 모두 구동해보기!</li>\n<li>my settings.py 확인, database 이름도 확인!</li>\n</ul>\n<p>😇 혹시 안깔려있으면!\npip install django\npip install client\npip install django-cors-headers</p>\n<h3 id=\"-요즘-느끼는-것-\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%A6%98-%EB%8A%90%EB%81%BC%EB%8A%94-%EA%B2%83-\" aria-label=\" 요즘 느끼는 것  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 요즘 느끼는 것! 🐳</h3>\n<ol>\n<li>기분이 태도가 되게 하지 않는 것. 말로는 너무 쉬운데 몸 힘들고 예민해지니까 기분이 태도가 되어버린다. 예민해질 때는 자리를 잠깐 피하거나 한 번더 생각하고 입밖으로 말 꺼내기.</li>\n<li>하나를 알더라도 정확하게 알고 가는 것이 너무 중요하다는 걸 느낀다. 어줍잖게 아는 것보다 쉽고 단순한 것이라도 내 것으로 철저하게 만드는게 중요하다. 그런 의미에서 이번 프로젝트에서는 초기세팅&#x26;회원가입&#x26;로그인&#x26;제품세부사항을 마스터하고, 깃헙에 익숙하게 하는게 목표다!!!😍</li>\n<li>모든 것에 장점과 단점이 있다. 장점을 보면서 감사함을 배우고 단점을 보면서 주의하고 더 조심스럽게 행동하게 된다. 지금 위코드에서 하고 있는 모든 것이 쉽지마는 않다. 요즘 프로젝트 짝꿍인 경래님말을 빌리자면 나는 정말로 찐 슬로우스타터인 것 같다. 조금 더디더라도 꼼꼼하게 하나씩 채우면서 가야겠다는 생각이 든다. 1초 1초 더 힘내서 버텨내야지!🍔</li>\n<li>왜케 좋은 사람들만 내 옆에 그득한지. 정말 감사하고 또 미안하다. 소중한 마음들을 감사하게 받고 예쁘게 전달하는 사람이 되고 싶다! 1차 프로젝트 무사히 끝내길!🍍</li>\n</ol>","frontmatter":{"date":"May 18, 2021","title":"HoxyLush(4)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-4/"}},"prev":{"id":"3270c7ab-284a-582b-9692-f101a07249e4","html":"<h2 id=\"️hoxy-lush️\" style=\"position:relative;\"><a href=\"#%EF%B8%8Fhoxy-lush%EF%B8%8F\" aria-label=\"️hoxy lush️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>♥️HOXY LUSH♥️</h2>\n<blockquote>\n<ul>\n<li>클론사이트 : LUSH KOREA</li>\n</ul>\n</blockquote>\n<ul>\n<li>기간 : 2021.05.10 - 2021.05.21</li>\n<li>팀구성\n프론트 (권오재, 김민정)\n백엔드 (김경래, 박은혜, 이승무)</li>\n</ul>\n<p><a href=\"https://youtu.be/8nwI5xW3PWo\">HOXY LUSH RESULT (CLICK HERE!)</a></p>\n<blockquote>\n</blockquote>\n<ul>\n<li>목표</li>\n<li>모델링 (✔️)</li>\n<li>회원가입 (✔️)</li>\n<li>로그인</li>\n<li>필터링</li>\n<li>제품 상세페이지 (✔️)</li>\n<li>검색</li>\n<li>찜 &#x26; 장바구니</li>\n<li>결제</li>\n<li>리뷰</li>\n<li>백엔드에서 내가 맡은 부분은 모델링과 회원가입, 제품상세페이지와 리뷰였다. 모델링은 3명의 백엔드가 함께 고민하며 완성했고, 리뷰는 내가 맡은 추가구현사항이었는데 시간부족과 프론트인원부족으로 우선순위에서 밀렸다.</li>\n</ul>\n<blockquote>\n<ul>\n<li>잘한점?</li>\n</ul>\n</blockquote>\n<ol>\n<li><strong>상품페이지 코드를 구현한 점이 너무 뿌듯하다.</strong> 그게 뭐라고 3일을 끙끙거리면서, product<em>id와 product</em>option_id를 엎치락뒤치락해가며 만들어낸 코드였는데 아주 기특하다. 초안과 최종안이 굉장히 다른데 그 부분에서 정말 많이 배우고 익혔다.</li>\n<li><strong>프론트와 소통할 때 계속 문제점을 찾아가고, 프론트와 백의 문제해결에 초점을 맞춰가려고 노력했다는 점</strong>을 칭찬해주고 싶다. 회원가입에서 내가 터미널로 요청을 보냈을 때는 전혀 문제가 없었는데 프론트랑만 연결을 하면 계속 문제가 났다. 그래서 유효성검사 정규식도 다시 한 번 들여다보고 모든 가능성을 열고 잘잘못을 따지기 이전에 문제를 해결하려고 노력했다. 덕분에 서로 맘상하지 않고 프론트와 백의 소통을 이끌고 문제해결도 된 것 같아서 너무 다행이라고 생각했다.</li>\n<li><strong>포기하지 않고 로그아웃하지 않은 점</strong>을 칭찬해주고 싶다. 심각하게도 코딩실력이 늘지 않는 나와 싸우며 어떻게든 notion에 있는 강의도 들어보고 멘토님께 질문도 해보고 어찌저찌 애써 보고 있는 내가 안쓰럽고 찡하다. 포기하지 않는 나를 너무 칭찬해!</li>\n</ol>\n<blockquote>\n<ul>\n<li>아쉬운점?</li>\n</ul>\n</blockquote>\n<ol>\n<li><strong>리뷰페이지를 구현하지 못한 점</strong>이 너무 아쉽다. 추가구현사항이라고 말은 했지만 충분히 하루정도의 시간이 있었는데 완벽하게 구현하고 싶은 욕심과 정말 아무 감이 오지 않는 답답함에 휩싸여 리뷰페이지 코드를 짜다가 중간에 멈췄다. 프론트 민정님이 프로젝트가 끝나고 다시 함께 구현해보자고 말씀해주셔서 다시 한 번 맞춰볼 생각이다.</li>\n<li>백엔드 구성원으로써, 그리고 혹쉬러쉬 팀의 구성원으로써 <strong>좀 더 능동적이지 못한 점</strong>이 아쉽다. 나는 부족하고 못한다는 강박관념에 계속 한발자국 물러나서 소통하고 다른 두분 뒤에 계속 숨어있었던 것 같다. 내가 먼저 프론트랑 소통해보고 모르면 계속 찾아가서 물어봐야했었는데 그게 왜그렇게 무서웠는지 모르겠다. 프론트에서 내 이름만 불러도 너무 무서웠다. 다음 프로젝트때는 stand up meeting때도 프론트와의 소통때에도 조금만 더 능동적으로 목소리를 내는 연습을 해야겠다. </li>\n</ol>\n<blockquote>\n<ul>\n<li>기록하고 싶은 코드</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ProductDetailView(View):\n    def get(self, request, product_id):\n        product = Product.objects.get(id=product_id)\n        result = {\n            'product_id'           : product.id,\n            'name'                 : product.name,\n            'hashtag'              : product.hashtag,\n            'hit'                  : product.hit,\n            'video_url'            : product.video_url,\n            'product_options'      : [{ \n                'price'         : productoption.price,\n                'quantity'      : productoption.quantity,\n                'weight'        : productoption.weight\n                } for productoption in product.productoption_set.all()],\n            'product_images'       : [productimage.image_url\n                  for productimage in product.productimage_set.all()],\n            'product_descriptions' : [{\n                    'description1' : productdescription.description,\n                    'image_url1'   : productdescription.image_url\n                } for productdescription in product.productdescription_set.all()],\n            'ingredient_detail'    : [{\n                    'description2' : ingredient.description,\n                    'image_url2'   : ingredient.image_url,\n                    'name2'        : ingredient.name\n                } for ingredient in product.ingredient_set.all()],\n            'tag'                  : [tag.name for tag in product.tag_set.all()]\n                }\n        return JsonResponse({'result' : result}, status=200)</code></pre></div>\n<blockquote>\n<ul>\n<li>프로젝트를 마치며!\n🍋 <strong>체력관리는 내 몫이다.</strong> 내가 언제 집중이 잘되는지 내가 언제 피곤한지 몇시간을 자야하는지 얼마나 먹어야하는지 그 하나하나가 다 너무 중요하다고 느껴졌다. 주 1회지만 지금처럼 꼭 클라이밍 타임을 지켜줘야겠다.\n🍋 그러면서 몸소 느낀것은 두가지인데, 첫번째는, <strong>함께 일하고 싶은 개발자</strong>가 되고 싶다는 점이다. ‘코드’를 잘짜는 건 너무 중요하지만 그렇다고 해서 ‘같이’ 일하고 싶을 수 없다. 내가 생각할 때 &#x3C;함께 일하고 싶은 개발자>는 열린 태도로 소통하며 차분하게 문제를 해결하는 사람인 것 같다. 내가 이런 사람이 되고싶게 만든 사람들은 혹쉬러쉬팀이다. 한 명 한 명이 내게 정말 다양한 인사이트를 주었다. 팀으로 일하면 너- 무 배울게 많아서 속상할 정도이다. 사람에게 배울 수 있는 어떠한 것 그 이상을 배운 느낌이다. 그래서 이 시간이 너무 소중하고 감사하고 느껴진다.\n🍋 나머지 하나는, ** 탄탄한 실력을 갖춘 백엔드 개발자가 되고 싶다**는 생각이었다. 협업하며 하나의 목표를 향해 함께 갈 때 사실 백엔드 개발자로서 갖춰야할 실력은 너무나 당연한 요소이다. 장바구니 뷰는 우리의 메인 포인트였는데, ‘아 내가 저 장바구니를 후다닥 다 짜버릴만한 실력을 갖춰서 문제를 빨리 해결하면 얼마나 좋을까?’ 계속 생각했던 것 같다. 실력이 있으면 원하는 것들을 좀 더 수월하게 구현하고 목표에 더 빨리 도달할 수 있다. 실력을 튼튼하게 키우고 싶다.</li>\n</ul>\n</blockquote>","frontmatter":{"date":"May 23, 2021","title":"HoxyLush(final)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project_final/"}},"site":{"siteMetadata":{"siteUrl":"https://eunhye43.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/project1-5/","nextSlug":"/project1-4/","prevSlug":"/project_final/"}},"staticQueryHashes":["1073350324","2938748437"]}