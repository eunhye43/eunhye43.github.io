{"componentChunkName":"component---src-templates-blog-template-js","path":"/project1-4/","result":{"data":{"cur":{"id":"81623312-5c25-5fc6-9d50-4ac4e9151647","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</p>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것1-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%831-\" aria-label=\" 오늘 프로젝트 하면서 배운 것1  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(1) 🐳</h3>\n<p>-> 회원가입&#x26;로그인 코드: 내가 구현한 건 SignUpVieww만!</p>\n<ol>\n<li>회원가입과 로그인은 사용자가 요청을 보내는 st 이기 때문에 post 메쏘드를 쓴다! 제이슨을 통해 바디에 데이터를 담아 받고 보낸다.</li>\n<li>따로 유효성 검사를 validator.py를 만들어서 import해주려고 했는데 그냥 회원가입안에 유효성 검사를 넣어주었다. 프론트랑 유효성검사 코드 확인은 필수! <strong>어떤 조건을 걸어주었는지 프론트에 먼저 얘기해주기!</strong></li>\n<li>bcrypt를 활용해서 비밀번호를 해쉬화해주었다. encode 시키고, 다시 decode까지! 이 코드는 외워버렸는데 아주 뿌듯스 👌🏽</li>\n<li>마지막으로, 초안을 작성할 때는 create안에 값을 다 따로 써주었었는데, 최종본에서 한번에 괄호로 열어서 다 넣어주니 훨씬 가독성이 올라간다.</li>\n</ol>\n<h3 id=\"-회원가입--로그인-\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85--%EB%A1%9C%EA%B7%B8%EC%9D%B8-\" aria-label=\" 회원가입  로그인  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐼 회원가입 &#x26; 로그인 🐼</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nimport bcrypt\nimport jwt\nimport re\n\nfrom django.views         import View\nfrom django.http          import JsonResponse\nfrom json.decoder         import JSONDecodeError\n\nfrom users.models import User\nfrom my_settings  import SECRET_KEY, ALGORITHM\n\nclass SignUpView(View):\n    def post(self, request):\n        try:\n            data         = json.loads(request.body)\n            account      = data[\"account\"]\n            password     = data[\"password\"]\n            email        = data[\"email\"]\n            phone_number = data[\"phone_number\"]\n            nickname     = data.get(\"nickname\")\n            address      = data.get(\"address\")\n\n            email_validation    = re.compile('^[a-z0-9]+@[a-z0-9]+\\.[a-z0-9.]+$', re.I)\n            password_validation = re.compile('^(?=.*[a-z])(?=.*[0-9]).{8,}', re.I)\n\n            if not email_validation.match(email):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_EMAIL\"}, status=400)\n\n            if not password_validation.match(password):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_PASSWORD\"}, status=400)\n           \n            if User.objects.filter(phone_number=data.get('phone_number')).exists() and data.get('phone_number') != None:\n                return JsonResponse({'MESSAGE': 'ALREADY_EXISTS'}, status = 400)\n\n            if User.objects.filter(nickname=data.get('nickname')).exists()\\\n                and data.get('nickname') != None:\n                return JsonResponse({'MESSAGE' : 'ALREADY_EXISTS'}, status = 400)\n\n            hashed_password= bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt()).decode(\"utf-8\")\n\n            User.objects.create(\n                account      = account,\n                password     = hashed_password,\n                email        = email,\n                phone_number = phone_number,\n                nickname     = nickname,\n                address      = address\n                )\n            return JsonResponse({\"MESSAGE\" : \"SUCCESS\"}, status = 201)\n\n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status = 400)\n\nclass LogInView(View):\n    def post(self, request):\n        try:\n            data = json.loads(request.body)\n            user = User.objects.get(account=data[\"account\"])\n            hashed_password = user.password.encode(\"utf-8\")\n\n            if not bcrypt.checkpw(data[\"password\"].encode(\"utf-8\"), hashed_password):\n                return JsonResponse({\"MESSAGE\":\"INVALID_USER\"}, status=401)\n\n            access_token = jwt.encode({\"account\" : user.id}, SECRET_KEY, algorithm = ALGORITHM)\n\n            return JsonResponse({\"MESSAGE\":\"SUCCESS\", \"ACCESS_TOKEN\": access_token}, status=200)\n        \n        except json.JSONDecodeError:\n            return JsonResponse({\"MESSAGE\": \"KEY_ERROR\"}, status=404) \n        \n        except User.DoesNotExist:\n            return JsonResponse({\"MESSAGE\": \"INVALID_USER\"}, status=404)\n        \n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status=400)</code></pre></div>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것2-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%832-\" aria-label=\" 오늘 프로젝트 하면서 배운 것2  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(2) 🐳</h3>\n<ol>\n<li>git commit 메시지\ngit commit (TEMPLATE에 맞춰서!)</li>\n<li><strong>Add</strong> - 레이아웃 / 기능 추가</li>\n<li><strong>Remove</strong> - 내용 삭제 (폴더 / 파일 삭제)</li>\n<li><strong>Modify</strong> - 수정 (JSON 데이터 포맷 변경 / 버튼 색깔 변경 / 폰트 변경)</li>\n<li><strong>Fix</strong> - 버그/오류 해결</li>\n<li>\n<p><strong>Refactor</strong> - 코드 리팩토링 (멘토 리뷰 반영 / 스스로 리팩토링 / 중복 코드 제거 / 불필요 코드 제거 / 성능 개선</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🥲 예시 \n🥲 분류: 한줄 제목\n- 구현내용 detail\n- 구현내용 detail\n🥲 Add: User app 생성 및 회원가입 엔드포인트 추가</code></pre></div>\n</li>\n<li>유저 앱을 만들고, 유저 모델 클래스 생성</li>\n<li>\n<p>회원가입 엔드포인트 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>git hub!</li>\n</ol>\n<p>😇 깃헙 익숙하게하기,\ngit add .\ngit commit (여기서 커밋메시지 들어가서 써주고 :wq!)\ngit log\ngit status\ngit push origin feature/signup-login\n(요기서 signup-login은 미리 만들어둔 브랜치 제목)\n(git push할때는 manage.py있는 곳에서 commit+push)\n<strong>(push하기전에는 pull 모두 다 받기)</strong></p>\n<p>😇 멘토님 ok merge나면,\ngit checkout main (메인으로 먼저가서!)\ngit pull origin main (메인으로 풀받아오기!)\ngit branch (name) 새로운 브랜치 하나 파서 시작하기! (브렌치는 메인에 만들자)</p>\n<p>😇 pull은 github 메인과 내 local메인사이에서 가능\npull받은 내 local메인의 업데이트 내용을 내 branch에서도 적용해주기 위해서 merge를 시켜주면 됨(in 브렌치, git merge main)</p>\n<p>😇 pull받아오면, </p>\n<ul>\n<li>makemigration, migrate, runserver까지 모두 구동해보기!</li>\n<li>my settings.py 확인, database 이름도 확인!</li>\n</ul>\n<p>😇 혹시 안깔려있으면!\npip install django\npip install client\npip install django-cors-headers</p>\n<h3 id=\"-요즘-느끼는-것-\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%A6%98-%EB%8A%90%EB%81%BC%EB%8A%94-%EA%B2%83-\" aria-label=\" 요즘 느끼는 것  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 요즘 느끼는 것! 🐳</h3>\n<ol>\n<li>기분이 태도가 되게 하지 않는 것. 말로는 너무 쉬운데 몸 힘들고 예민해지니까 기분이 태도가 되어버린다. 예민해질 때는 자리를 잠깐 피하거나 한 번더 생각하고 입밖으로 말 꺼내기.</li>\n<li>하나를 알더라도 정확하게 알고 가는 것이 너무 중요하다는 걸 느낀다. 어줍잖게 아는 것보다 쉽고 단순한 것이라도 내 것으로 철저하게 만드는게 중요하다. 그런 의미에서 이번 프로젝트에서는 초기세팅&#x26;회원가입&#x26;로그인&#x26;제품세부사항을 마스터하고, 깃헙에 익숙하게 하는게 목표다!!!😍</li>\n<li>모든 것에 장점과 단점이 있다. 장점을 보면서 감사함을 배우고 단점을 보면서 주의하고 더 조심스럽게 행동하게 된다. 지금 위코드에서 하고 있는 모든 것이 쉽지마는 않다. 요즘 프로젝트 짝꿍인 경래님말을 빌리자면 나는 정말로 찐 슬로우스타터인 것 같다. 조금 더디더라도 꼼꼼하게 하나씩 채우면서 가야겠다는 생각이 든다. 1초 1초 더 힘내서 버텨내야지!🍔</li>\n<li>왜케 좋은 사람들만 내 옆에 그득한지. 정말 감사하고 또 미안하다. 소중한 마음들을 감사하게 받고 예쁘게 전달하는 사람이 되고 싶다! 1차 프로젝트 무사히 끝내길!🍍</li>\n</ol>","excerpt":"🦖 1차 프로젝트 <HOXY LUSH?> 🦖 🐳 오늘 프로젝트 하면서 배운 것(1) 🐳 -> 회원가입&로그인 코드: 내가 구현한 건 SignUpVieww만! 회원가입과 로그인은 사용자가 요청을 보내는 st 이기 때문에 post 메쏘드를 쓴다! 제이슨을 통해 바디에 데이터를 담아 받고 보낸다. 따로 유효성 검사를 validator.py를 만들어서 import해주려고 했는데 그냥 회원가입안에 유효성 검사를 넣어주었다. 프론트랑 유효성검사 코드 확인은 필수! 어떤 조건을 걸어주었는지 프론트에 먼저 얘기해주기! bcrypt를 활용해서 비밀번호를 해쉬화해주었다. encode 시키고, 다시 decode까지! 이 코드는 외워버렸는데 아주 뿌듯스 👌🏽 마지막으로, 초안을 작성할 때는 create안에 값을 다 따로 써주었었는데, 최종본에서 한번에 괄호로 열어서 다 넣어주니 훨씬 가독성이 올라간다. 🐼 회원가입 & 로그인 🐼 🐳 오늘 프로젝트 하면서 배운 것(2) 🐳 git commit 메시지\ngit…","frontmatter":{"date":"May 18, 2021","title":"HoxyLush(4)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-4/"}},"next":{"id":"b16b76ed-cc21-5297-a81d-03647681cbb0","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖\n오늘은 회원가입&#x26;로그인 models.py를 토대로 views.py 마무리를 했다. 통신하는 것 때문에 속도가 좀 더뎌진게 맘에 걸리지만 하나하나 꼼꼼하게 해나가고 있는 것 같아서 걱정되면서도 뿌듯했다.</p>\n<blockquote>\n<h2 id=\"오늘-배운-것\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98-%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-label=\"오늘 배운 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘 배운 것!</h2>\n</blockquote>\n<p>😇 1. 코드컨벤션에 따라 모듈을 구분해주는 것.</p>\n<ul>\n<li>python 자체 모듈</li>\n<li>django 모듈</li>\n<li>\n<p>사용자 생성 모듈</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json # 파이썬 자체모듈\nimport bcrypt\nimport jwt\nimport re\nfrom django.views         import View #django 모듈\nfrom django.http          import JsonResponse\nfrom json.decoder         import JSONDecodeError\nfrom users.models         import User #사용자 생성 모듈\nfrom my_settings          import SECRET_KEY, ALGORITHM</code></pre></div>\n</li>\n</ul>\n<p>😇 2. 정규표현식! (유효성 검사를 위한 정규표현식)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🦕 email_validation    = re.compile('^[a-z0-9]+@[a-z0-9]+\\.[a-z0-9.]+$', re.I)\n🦕 password_validation = re.compile(r'^(?=.*[a-z])(?=.*[0-9])(?=.*[~!@#$%^&amp;*]).{8,}', re.I)\nif not email_validation.match(email):\n   return JsonResponse({\"MESSAGE\" : \"INVALID_EMAIL\"}, status=400)\nif not password_validation.match(password):\n   return JsonResponse({\"MESSAGE\" : \"INVALID_PASSWORD\"}, status=400)</code></pre></div>\n<ul>\n<li>email과 password에 대해 validation을 정의해주고, if문을 통해 유효성 검사를 진행해주기!… 그냥 외울까?…?</li>\n</ul>\n<p>😇 3. 중복값 없애기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if User.objects.filter(phone_number=data.get('phone_number')).exists()\\\n   and data.get('phone_number') != None:\n   return JsonResponse({'MESSAGE': 'ALREADY_EXISTS'}, status = 400)\n\nif User.objects.filter(nickname=data.get('nickname')).exists()\\\n   and data.get('nickname') != None:\n   return JsonResponse({'MESSAGE' : 'ALREADY_EXISTS'}, status = 400)</code></pre></div>\n<p>Q를 쓰라고 말씀을 해주셨는데 Q를 썼다가 중복을 제대로 거를 수가 없어서 if문, filter값을 활용하고 None값이 아닌 것을 조건으로 주어서 phone_number와 nickname의 중복값을 걸러주었다.</p>\n<ul>\n<li>data[‘nickname’] 과 data.get(‘nickname’)차이?\ndata[‘nickname’]으로 정의하면 닉네임 값이 들어오지 않을 시 바로 에러가 나오고 data.get(‘nickname’)으로 정의 시 null값으로 들어옴!</li>\n</ul>\n<p>😇 4. 토큰 발행 할 때, algorithm도 my_settings에 추가해주기!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">access_token = jwt.encode({\"account\" : user.id}, SECRET_KEY, algorithm = ALGORITHM)\n\n# 쪼기에 있는 알고리즘을 ![](https://images.velog.io/images/majaeh43/post/b7cafade-f809-48fb-aaf1-35716bfdf70d/image.png) 요렇게 추가!</code></pre></div>\n<p>😇 5. 상태코드 401과 404의 차이?\n상태코드 401은 인증이 안돼 자원을 이용할 수 없는 상태고, 미인증 상태를 의미!\n상태코드 404는 원하는 경로 파일, 자원등을 찾을 수 없을 때 발생함. (경래님 답변!)</p>\n<p>😇 조심해야할 부분!\npull받고 makemigration, migrate 챙기기.\ncommit message 주의해서 올리기 *링크텍스트(<a href=\"https://www.notion.so/wecode/Commit-Message-Guidelines-eb3d8ebc0d014c26848ee628934ae430\">https://www.notion.so/wecode/Commit-Message-Guidelines-eb3d8ebc0d014c26848ee628934ae430</a>)\n통신할 때, 에러메시지 다 확인하기 -> 내가 쓴 코드에 대해서 정확하게 다 파악하고 있기.</p>\n<p>😇 내가 오늘 배운 것을 느리더라도 천천히 소화시켜주기.\n행복하려고 배우는 코딩인데 행복지수가 점점 낮아지는 것 같은 기분이 들때가 있다. 그치만 순간순간 감사하면서 1초 1초 더 나아지고 성장하고 싶은 맘이다. 그만 징징대고 오류와의 혈투를 피하지 않겠다…</p>","frontmatter":{"date":"May 14, 2021","title":"HoxyLush(3)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-3/"}},"prev":{"id":"039142dd-cf06-5afa-be08-75e1748c8a31","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</p>\n<h3 id=\"-초안과-최종본-사이에서-내가-배운-것-\" style=\"position:relative;\"><a href=\"#-%EC%B4%88%EC%95%88%EA%B3%BC-%EC%B5%9C%EC%A2%85%EB%B3%B8-%EC%82%AC%EC%9D%B4%EC%97%90%EC%84%9C-%EB%82%B4%EA%B0%80-%EB%B0%B0%EC%9A%B4-%EA%B2%83-\" aria-label=\" 초안과 최종본 사이에서 내가 배운 것  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 초안과 최종본 사이에서 내가 배운 것! 🐳</h3>\n<p>-> 내가 구현한 건 ProductDetailView만!</p>\n<ol>\n<li>처음에는 for 문을 돌려야하는 키값들을 3가지로 나눠서 각각 리스트에 어펜드 해주는 식으로 코드를 짰다. 그래서 맨마지막 result에 그 list값을 넣어주는 방법으로 리턴을 해줬다. 최종본에는 리스트 컴프렌션을 써서 for문을 한줄로 만들어주고 result안에 값을 다 넣어주니 코드 효율성이 올라갔고 가독성도 좋아졌다.</li>\n<li>초안에서 filter를 주고 해당 product를 찾는 방법으로 코드를 짰었는데 최종본에서는 모두 set을 써서 _set.all()로 좀더 심플하게 코드를 정리했다.</li>\n<li>\n<p>product option값들도 한개가 아니라 여러가지 값이기 때문에 for문을 돌려주어야하고, product에서 productoption의 price, quantity, weight값 한개씩만 set을 통해 가져오고 싶었는데 set을 쓰려면 값을 특정해주어야만 가능하다고 하셨다.</p>\n<h3 id=\"-제품-상세페이지-viewpy-초안-\" style=\"position:relative;\"><a href=\"#-%EC%A0%9C%ED%92%88-%EC%83%81%EC%84%B8%ED%8E%98%EC%9D%B4%EC%A7%80-viewpy-%EC%B4%88%EC%95%88-\" aria-label=\" 제품 상세페이지 viewpy 초안  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐼 제품 상세페이지 view.py 초안 🐼</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nfrom django.http import JsonResponse\nfrom django.views import View</code></pre></div>\n</li>\n</ol>\n<p>from products.models import Product, ProductImage, ProductOption, ProductDescription, Ingredient</p>\n<p>class ProductDetailView(View):\ndef get(self, request, product<em>id):\nproduct = Product.objects.get(id=product</em>id)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    product_images = []\n    productimages = ProductImage.objects.filter(product=product)\n    for productimage in productimages:\n        product_images.append(productimage.image_url)\n\n    product_descriptions = []\n    productdescriptions = product.productdescription_set.all()\n    for productdescription in productdescriptions:\n        product_descriptions.append({\n             'description1' : productdescription.description,\n             'image_url1' : productdescription.image_url\n             })\n\n    ingredient_detail = []\n    ingredients = product.ingredient_set.all()\n    for ingredient in ingredients:\n        ingredient_detail.append({\n                    'description2' : ingredient.description,\n                    'image_url2' : ingredient.image_url,\n                    'name2' : ingredient.name\n                 })\n\n    result = {\n        'id'        : product.id,\n        'name'      : product.name,\n        'hashtag'   : product.hashtag,\n        'hit'       : product.hit,\n        'video_url' : product.video_url,\n        'price'     : product.productoption_set.first().price,\n        'weight'    : product.productoption_set.first().weight,\n        'quantity'  : product.productoption_set.first().quantity,\n        'product_images' : product_images,\n        'product_descriptions' : product_descriptions,\n        'ingredient_detail' : ingredient_detail\n    }\n    \n    \n    return JsonResponse({'result' : result}, status=200)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 🐼 제품 상세페이지 view.py 최종 🐼 </code></pre></div>\n<p>import json</p>\n<p>from django.http     import JsonResponse\nfrom django.views    import View\nfrom django.db.models       import Q</p>\n<p>from products.models import Category, Product, ProductImage, ProductOption, ProductDescription, Ingredient, Tag, SubCategory, ProductTag</p>\n<p>class ProductListView(View):\ndef get(self, request):\ncategory<em>id       = request.GET.get(‘category</em>id’)\nsub<em>category</em>id   = request.GET.get(‘sub<em>category</em>id’)\nkeyword           = request.GET.get(‘keyword’)\npagination        = int(request.GET.get(‘pagination’, 0))\nlimit             = int(request.GET.get(‘limit’, 4))\noffset            = pagination * 4</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    if category_id or sub_category_id:\n        products = Product.objects.filter(\n            Q(category_id = category_id) |\n            Q(sub_category_id = sub_category_id))[offset:offset+limit]\n\n    elif keyword:\n        products= Product.objects.filter(name__contains = keyword)\n        \n    else:\n        products = Product.objects.all()[offset:offset+limit]\n\n    product_list = [{\n        'id'            : product.id,\n        'name'          : product.name,\n        'hashtag'       : product.hashtag,\n        'option' : [{ \n            'option_id'     : option.id,\n            'price'         : option.price,\n            'quantity'      : option.quantity,\n            'weight'        : option.weight,\n            } for option in product.productoption_set.all()],\n        'image_url'     : product.productimage_set.first().image_url,\n        'tag'    : [{'id' : tag.id, 'tag': tag.name} for tag in product.tag_set.all()]\n        } for product in products]\n    \n    return JsonResponse({'product_info' : product_list}, status = 200)</code></pre></div>\n<p>class ProductDetailView(View):\ndef get(self, request, product<em>id):\nproduct = Product.objects.get(id=product</em>id)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    result = {\n        'product_id'           : product.id,\n        'name'                 : product.name,\n        'hashtag'              : product.hashtag,\n        'hit'                  : product.hit,\n        'video_url'            : product.video_url,\n        'product_options'      : [{ \n            'price'         : productoption.price,\n            'quantity'      : productoption.quantity,\n            'weight'        : productoption.weight\n            } for productoption in product.productoption_set.all()],\n        'product_images'       : [productimage.image_url\n              for productimage in product.productimage_set.all()],\n        'product_descriptions' : [{\n                'description1' : productdescription.description,\n                'image_url1'   : productdescription.image_url\n            } for productdescription in product.productdescription_set.all()],\n        'ingredient_detail'    : [{\n                'description2' : ingredient.description,\n                'image_url2'   : ingredient.image_url,\n                'name2'        : ingredient.name\n            } for ingredient in product.ingredient_set.all()],\n        'tag'                  : [tag.name for tag in product.tag_set.all()]\n            }\n    return JsonResponse({'result' : result}, status=200)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 🐳 오늘 새롭게 배운 것! 🐳 \npush한 커밋 삭제(가장 최근 commit을 삭제)\n>git reset HEAD^\n\n깃 커밋메시지 수정\n>git commit –amend\n\n강제 push \n>git push origin master(또는 브랜치이름) -f\n\n브렌치 삭제\n>git branch -d (브랜치명)\n\n* 깃메인에서는 작업하지 않기(메인에서 작업하다가 브랜치파서 넘어가면 add, commit해줘야하니까...) => 메인에서 브랜치 만들고 거기서 작업!\n\n* push 받기 전에는 pull 먼저 다 받아주기!</code></pre></div>","frontmatter":{"date":"May 19, 2021","title":"HoxyLush(5)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-5/"}},"site":{"siteMetadata":{"siteUrl":"https://eunhye43.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/project1-4/","nextSlug":"/project1-3/","prevSlug":"/project1-5/"}},"staticQueryHashes":["1073350324","2938748437"]}