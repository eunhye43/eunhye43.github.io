{"componentChunkName":"component---src-templates-blog-template-js","path":"/project1-3/","result":{"data":{"cur":{"id":"b16b76ed-cc21-5297-a81d-03647681cbb0","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖\n오늘은 회원가입&#x26;로그인 models.py를 토대로 views.py 마무리를 했다. 통신하는 것 때문에 속도가 좀 더뎌진게 맘에 걸리지만 하나하나 꼼꼼하게 해나가고 있는 것 같아서 걱정되면서도 뿌듯했다.</p>\n<blockquote>\n<h2 id=\"오늘-배운-것\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98-%EB%B0%B0%EC%9A%B4-%EA%B2%83\" aria-label=\"오늘 배운 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘 배운 것!</h2>\n</blockquote>\n<p>😇 1. 코드컨벤션에 따라 모듈을 구분해주는 것.</p>\n<ul>\n<li>python 자체 모듈</li>\n<li>django 모듈</li>\n<li>\n<p>사용자 생성 모듈</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json # 파이썬 자체모듈\nimport bcrypt\nimport jwt\nimport re\nfrom django.views         import View #django 모듈\nfrom django.http          import JsonResponse\nfrom json.decoder         import JSONDecodeError\nfrom users.models         import User #사용자 생성 모듈\nfrom my_settings          import SECRET_KEY, ALGORITHM</code></pre></div>\n</li>\n</ul>\n<p>😇 2. 정규표현식! (유효성 검사를 위한 정규표현식)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🦕 email_validation    = re.compile('^[a-z0-9]+@[a-z0-9]+\\.[a-z0-9.]+$', re.I)\n🦕 password_validation = re.compile(r'^(?=.*[a-z])(?=.*[0-9])(?=.*[~!@#$%^&amp;*]).{8,}', re.I)\nif not email_validation.match(email):\n   return JsonResponse({\"MESSAGE\" : \"INVALID_EMAIL\"}, status=400)\nif not password_validation.match(password):\n   return JsonResponse({\"MESSAGE\" : \"INVALID_PASSWORD\"}, status=400)</code></pre></div>\n<ul>\n<li>email과 password에 대해 validation을 정의해주고, if문을 통해 유효성 검사를 진행해주기!… 그냥 외울까?…?</li>\n</ul>\n<p>😇 3. 중복값 없애기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if User.objects.filter(phone_number=data.get('phone_number')).exists()\\\n   and data.get('phone_number') != None:\n   return JsonResponse({'MESSAGE': 'ALREADY_EXISTS'}, status = 400)\n\nif User.objects.filter(nickname=data.get('nickname')).exists()\\\n   and data.get('nickname') != None:\n   return JsonResponse({'MESSAGE' : 'ALREADY_EXISTS'}, status = 400)</code></pre></div>\n<p>Q를 쓰라고 말씀을 해주셨는데 Q를 썼다가 중복을 제대로 거를 수가 없어서 if문, filter값을 활용하고 None값이 아닌 것을 조건으로 주어서 phone_number와 nickname의 중복값을 걸러주었다.</p>\n<ul>\n<li>data[‘nickname’] 과 data.get(‘nickname’)차이?\ndata[‘nickname’]으로 정의하면 닉네임 값이 들어오지 않을 시 바로 에러가 나오고 data.get(‘nickname’)으로 정의 시 null값으로 들어옴!</li>\n</ul>\n<p>😇 4. 토큰 발행 할 때, algorithm도 my_settings에 추가해주기!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">access_token = jwt.encode({\"account\" : user.id}, SECRET_KEY, algorithm = ALGORITHM)\n\n# 쪼기에 있는 알고리즘을 ![](https://images.velog.io/images/majaeh43/post/b7cafade-f809-48fb-aaf1-35716bfdf70d/image.png) 요렇게 추가!</code></pre></div>\n<p>😇 5. 상태코드 401과 404의 차이?\n상태코드 401은 인증이 안돼 자원을 이용할 수 없는 상태고, 미인증 상태를 의미!\n상태코드 404는 원하는 경로 파일, 자원등을 찾을 수 없을 때 발생함. (경래님 답변!)</p>\n<p>😇 조심해야할 부분!\npull받고 makemigration, migrate 챙기기.\ncommit message 주의해서 올리기 *링크텍스트(<a href=\"https://www.notion.so/wecode/Commit-Message-Guidelines-eb3d8ebc0d014c26848ee628934ae430\">https://www.notion.so/wecode/Commit-Message-Guidelines-eb3d8ebc0d014c26848ee628934ae430</a>)\n통신할 때, 에러메시지 다 확인하기 -> 내가 쓴 코드에 대해서 정확하게 다 파악하고 있기.</p>\n<p>😇 내가 오늘 배운 것을 느리더라도 천천히 소화시켜주기.\n행복하려고 배우는 코딩인데 행복지수가 점점 낮아지는 것 같은 기분이 들때가 있다. 그치만 순간순간 감사하면서 1초 1초 더 나아지고 성장하고 싶은 맘이다. 그만 징징대고 오류와의 혈투를 피하지 않겠다…</p>","excerpt":"🦖 1차 프로젝트 <HOXY LUSH?> 🦖\n오늘은 회원가입&로그인 models.py를 토대로 views.py 마무리를 했다. 통신하는 것 때문에 속도가 좀 더뎌진게 맘에 걸리지만 하나하나 꼼꼼하게 해나가고 있는 것 같아서 걱정되면서도 뿌듯했다. 오늘 배운 것! 😇 1. 코드컨벤션에 따라 모듈을 구분해주는 것. python 자체 모듈 django 모듈 사용자 생성 모듈 😇 2. 정규표현식! (유효성 검사를 위한 정규표현식) email과 password에 대해 validation을 정의해주고, if문을 통해 유효성 검사를 진행해주기!… 그냥 외울까?…? 😇 3. 중복값 없애기 Q를 쓰라고 말씀을 해주셨는데 Q를 썼다가 중복을 제대로 거를 수가 없어서 if문, filter값을 활용하고 None값이 아닌 것을 조건으로 주어서 phone_number와 nickname의 중복값을 걸러주었다. data‘nickname’ 과 data.get(‘nickname’)차이?\ndata‘nickname’…","frontmatter":{"date":"May 14, 2021","title":"HoxyLush(3)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-3/"}},"next":{"id":"4b04fd9c-0bc9-55aa-ad5f-2e4859af2d69","html":"<h3 id=\"-1차-프로젝트-hoxy-lush-\" style=\"position:relative;\"><a href=\"#-1%EC%B0%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-hoxy-lush-\" aria-label=\" 1차 프로젝트 hoxy lush  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</h3>\n<blockquote>\n<ul>\n<li>오늘 배운 것\n모델링 끄읕-! 테이블도 models.py도 완성 잘하고 컨펌도 잘 받음!\n🥕 1. 함께 협업 할 때에는 한 사람이 models.py를 작성하는 것이 좋고 github에 push후 pull request를 올림. github메인에서 local메인으로 받는 것이 pull이고, 내 terminal에서는,</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git checkout main \ngit pull origin main</code></pre></div>\n<p>이렇게 받아주면 됨.\n그다음 로컬 메인 브랜치에서 새로운 브랜치를 만들고 거기로 checkout해서 내 작업 다시 시작하면됨!\n브랜치 옮길때는 add-commit 꼮꼮!!</p>\n<p>🥕 2. Models.py에서 ForeignKey참조할 때, 클래스명에서 오류가 났는데 그런 경우, 참조해오는 클래스명에는 ”을 붙여주지 않기!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1) user = models.ForeignKey(User, on_delete=models.CASCADE)\n2) product = models.ForeignKey(\"Product\", on_delete=models.CASCADE)</code></pre></div>\n<p>1)번은 users앱에서 가져온 User class이고, 2)번은 기존 앱에 있는 Product class이기 때문에 \"\" 유뮤의 차이가 있다!</p>\n<p>🥕 3. Pull받아올 때, my_settings.py랑 database는 내가 새로 생성해줘야한다는 점!</p>\n<p>🥕 4.내가 맡은 회원가입 할 때, 꼭 필요한 것?</p>\n<ul>\n<li>가상환경은 무조건 (다 깔려있는 걸로 불러와주자)</li>\n<li>httpie 깔려있어야!(brew install httpie)</li>\n<li>import json, bcrypt, jwt </li>\n<li>어차피 회원가입&#x26;로그인 같이 할거니까, 회원가입에서는 hashed_password로만 만들어주고 .validator.py 따로 만들어서 회원가입과 로그인 두개 다 관리해주자.</li>\n<li>서버 켜주고, 통신해주기.</li>\n</ul>\n<p>🥕 5. 통신할 때는 ^^</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http post http://127.0.0.1:8000/users/signup account='hiroo123' password='2sdascacsasfa' email='abc8@naver.com' phone_number=01012345678</code></pre></div>\n<p><strong>루트지정을 users(앱)/signup(앱에서 지정해준 연결통로)!!!</strong>\n이걸 몰라서 무수한 404를 접하게 되었다^^ 절대 안까먹을 듯. 승무님 고마씁니당…😇</p>\n<blockquote>\n<p>🥝 오늘도 진짜 많이 배웠다. 하나를 배울 때 좀 더 머리와 손과 맘에 체화시키는 노력이 필요하다. 초기세팅-회원가입-로그인은 절대! 잊지 않도록 이번 프로젝트때 이것만은 꼭 잡고 가도록 노력해야지!</p>\n</blockquote>","frontmatter":{"date":"May 12, 2021","title":"HoxyLush(2)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project2/"}},"prev":{"id":"81623312-5c25-5fc6-9d50-4ac4e9151647","html":"<p>🦖 1차 프로젝트 &#x3C;HOXY LUSH?> 🦖</p>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것1-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%831-\" aria-label=\" 오늘 프로젝트 하면서 배운 것1  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(1) 🐳</h3>\n<p>-> 회원가입&#x26;로그인 코드: 내가 구현한 건 SignUpVieww만!</p>\n<ol>\n<li>회원가입과 로그인은 사용자가 요청을 보내는 st 이기 때문에 post 메쏘드를 쓴다! 제이슨을 통해 바디에 데이터를 담아 받고 보낸다.</li>\n<li>따로 유효성 검사를 validator.py를 만들어서 import해주려고 했는데 그냥 회원가입안에 유효성 검사를 넣어주었다. 프론트랑 유효성검사 코드 확인은 필수! <strong>어떤 조건을 걸어주었는지 프론트에 먼저 얘기해주기!</strong></li>\n<li>bcrypt를 활용해서 비밀번호를 해쉬화해주었다. encode 시키고, 다시 decode까지! 이 코드는 외워버렸는데 아주 뿌듯스 👌🏽</li>\n<li>마지막으로, 초안을 작성할 때는 create안에 값을 다 따로 써주었었는데, 최종본에서 한번에 괄호로 열어서 다 넣어주니 훨씬 가독성이 올라간다.</li>\n</ol>\n<h3 id=\"-회원가입--로그인-\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85--%EB%A1%9C%EA%B7%B8%EC%9D%B8-\" aria-label=\" 회원가입  로그인  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐼 회원가입 &#x26; 로그인 🐼</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import json\nimport bcrypt\nimport jwt\nimport re\n\nfrom django.views         import View\nfrom django.http          import JsonResponse\nfrom json.decoder         import JSONDecodeError\n\nfrom users.models import User\nfrom my_settings  import SECRET_KEY, ALGORITHM\n\nclass SignUpView(View):\n    def post(self, request):\n        try:\n            data         = json.loads(request.body)\n            account      = data[\"account\"]\n            password     = data[\"password\"]\n            email        = data[\"email\"]\n            phone_number = data[\"phone_number\"]\n            nickname     = data.get(\"nickname\")\n            address      = data.get(\"address\")\n\n            email_validation    = re.compile('^[a-z0-9]+@[a-z0-9]+\\.[a-z0-9.]+$', re.I)\n            password_validation = re.compile('^(?=.*[a-z])(?=.*[0-9]).{8,}', re.I)\n\n            if not email_validation.match(email):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_EMAIL\"}, status=400)\n\n            if not password_validation.match(password):\n                return JsonResponse({\"MESSAGE\" : \"INVALID_PASSWORD\"}, status=400)\n           \n            if User.objects.filter(phone_number=data.get('phone_number')).exists() and data.get('phone_number') != None:\n                return JsonResponse({'MESSAGE': 'ALREADY_EXISTS'}, status = 400)\n\n            if User.objects.filter(nickname=data.get('nickname')).exists()\\\n                and data.get('nickname') != None:\n                return JsonResponse({'MESSAGE' : 'ALREADY_EXISTS'}, status = 400)\n\n            hashed_password= bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt()).decode(\"utf-8\")\n\n            User.objects.create(\n                account      = account,\n                password     = hashed_password,\n                email        = email,\n                phone_number = phone_number,\n                nickname     = nickname,\n                address      = address\n                )\n            return JsonResponse({\"MESSAGE\" : \"SUCCESS\"}, status = 201)\n\n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status = 400)\n\nclass LogInView(View):\n    def post(self, request):\n        try:\n            data = json.loads(request.body)\n            user = User.objects.get(account=data[\"account\"])\n            hashed_password = user.password.encode(\"utf-8\")\n\n            if not bcrypt.checkpw(data[\"password\"].encode(\"utf-8\"), hashed_password):\n                return JsonResponse({\"MESSAGE\":\"INVALID_USER\"}, status=401)\n\n            access_token = jwt.encode({\"account\" : user.id}, SECRET_KEY, algorithm = ALGORITHM)\n\n            return JsonResponse({\"MESSAGE\":\"SUCCESS\", \"ACCESS_TOKEN\": access_token}, status=200)\n        \n        except json.JSONDecodeError:\n            return JsonResponse({\"MESSAGE\": \"KEY_ERROR\"}, status=404) \n        \n        except User.DoesNotExist:\n            return JsonResponse({\"MESSAGE\": \"INVALID_USER\"}, status=404)\n        \n        except KeyError:\n            return JsonResponse({\"MESSAGE\" : \"KEY_ERROR\"}, status=400)</code></pre></div>\n<h3 id=\"-오늘-프로젝트-하면서-배운-것2-\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B4-%EA%B2%832-\" aria-label=\" 오늘 프로젝트 하면서 배운 것2  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 오늘 프로젝트 하면서 배운 것(2) 🐳</h3>\n<ol>\n<li>git commit 메시지\ngit commit (TEMPLATE에 맞춰서!)</li>\n<li><strong>Add</strong> - 레이아웃 / 기능 추가</li>\n<li><strong>Remove</strong> - 내용 삭제 (폴더 / 파일 삭제)</li>\n<li><strong>Modify</strong> - 수정 (JSON 데이터 포맷 변경 / 버튼 색깔 변경 / 폰트 변경)</li>\n<li><strong>Fix</strong> - 버그/오류 해결</li>\n<li>\n<p><strong>Refactor</strong> - 코드 리팩토링 (멘토 리뷰 반영 / 스스로 리팩토링 / 중복 코드 제거 / 불필요 코드 제거 / 성능 개선</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">🥲 예시 \n🥲 분류: 한줄 제목\n- 구현내용 detail\n- 구현내용 detail\n🥲 Add: User app 생성 및 회원가입 엔드포인트 추가</code></pre></div>\n</li>\n<li>유저 앱을 만들고, 유저 모델 클래스 생성</li>\n<li>\n<p>회원가입 엔드포인트 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>git hub!</li>\n</ol>\n<p>😇 깃헙 익숙하게하기,\ngit add .\ngit commit (여기서 커밋메시지 들어가서 써주고 :wq!)\ngit log\ngit status\ngit push origin feature/signup-login\n(요기서 signup-login은 미리 만들어둔 브랜치 제목)\n(git push할때는 manage.py있는 곳에서 commit+push)\n<strong>(push하기전에는 pull 모두 다 받기)</strong></p>\n<p>😇 멘토님 ok merge나면,\ngit checkout main (메인으로 먼저가서!)\ngit pull origin main (메인으로 풀받아오기!)\ngit branch (name) 새로운 브랜치 하나 파서 시작하기! (브렌치는 메인에 만들자)</p>\n<p>😇 pull은 github 메인과 내 local메인사이에서 가능\npull받은 내 local메인의 업데이트 내용을 내 branch에서도 적용해주기 위해서 merge를 시켜주면 됨(in 브렌치, git merge main)</p>\n<p>😇 pull받아오면, </p>\n<ul>\n<li>makemigration, migrate, runserver까지 모두 구동해보기!</li>\n<li>my settings.py 확인, database 이름도 확인!</li>\n</ul>\n<p>😇 혹시 안깔려있으면!\npip install django\npip install client\npip install django-cors-headers</p>\n<h3 id=\"-요즘-느끼는-것-\" style=\"position:relative;\"><a href=\"#-%EC%9A%94%EC%A6%98-%EB%8A%90%EB%81%BC%EB%8A%94-%EA%B2%83-\" aria-label=\" 요즘 느끼는 것  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🐳 요즘 느끼는 것! 🐳</h3>\n<ol>\n<li>기분이 태도가 되게 하지 않는 것. 말로는 너무 쉬운데 몸 힘들고 예민해지니까 기분이 태도가 되어버린다. 예민해질 때는 자리를 잠깐 피하거나 한 번더 생각하고 입밖으로 말 꺼내기.</li>\n<li>하나를 알더라도 정확하게 알고 가는 것이 너무 중요하다는 걸 느낀다. 어줍잖게 아는 것보다 쉽고 단순한 것이라도 내 것으로 철저하게 만드는게 중요하다. 그런 의미에서 이번 프로젝트에서는 초기세팅&#x26;회원가입&#x26;로그인&#x26;제품세부사항을 마스터하고, 깃헙에 익숙하게 하는게 목표다!!!😍</li>\n<li>모든 것에 장점과 단점이 있다. 장점을 보면서 감사함을 배우고 단점을 보면서 주의하고 더 조심스럽게 행동하게 된다. 지금 위코드에서 하고 있는 모든 것이 쉽지마는 않다. 요즘 프로젝트 짝꿍인 경래님말을 빌리자면 나는 정말로 찐 슬로우스타터인 것 같다. 조금 더디더라도 꼼꼼하게 하나씩 채우면서 가야겠다는 생각이 든다. 1초 1초 더 힘내서 버텨내야지!🍔</li>\n<li>왜케 좋은 사람들만 내 옆에 그득한지. 정말 감사하고 또 미안하다. 소중한 마음들을 감사하게 받고 예쁘게 전달하는 사람이 되고 싶다! 1차 프로젝트 무사히 끝내길!🍍</li>\n</ol>","frontmatter":{"date":"May 18, 2021","title":"HoxyLush(4)","categories":"프로젝트","author":"majaeh","emoji":"🍄"},"fields":{"slug":"/project1-4/"}},"site":{"siteMetadata":{"siteUrl":"https://eunhye43.github.io","comments":{"utterances":{"repo":"zoomkoding/zoomkoding-gatsby-blog"}}}}},"pageContext":{"slug":"/project1-3/","nextSlug":"/project2/","prevSlug":"/project1-4/"}},"staticQueryHashes":["1073350324","2938748437"]}